# Yahoo! Cloud System Benchmark
# Workload A: Update heavy workload
#   Application example: Session store recording recent actions
#
#   Read/update ratio: 50/50
#   Default data size: 1 KB records (10 fields, 100 bytes each, plus key)
#   Request distribution: zipfian

# # # Initial workload
# fieldlength=100000
# fieldcount=1000
# recordcount=200000
# operationcount=20000000
# # operationcount=200000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=1
# updateproportion=0
# scanproportion=0
# insertproportion=0
#
# requestdistribution=zipfian


# # This is good for testing YCSB througuput
# fieldlength=100
# fieldcount=100
# recordcount=2000000
# operationcount=200000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0
# updateproportion=0
# scanproportion=0
# insertproportion=1
#
# requestdistribution=zipfian

# # This is good for testing monitoring latency
# fieldlength=100
# fieldcount=100
# recordcount=200000
# perationcount=2000000000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0.5
# updateproportion=0.5
# scanproportion=0
# insertproportion=0
#
# requestdistribution=zipfian


# # This is test
# fieldlength=8000
# fieldcount=100
# recordcount=20000
# operationcount=200000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0.5
# updateproportion=0.4 
# scanproportion=0
# insertproportion=0.1
#
# requestdistribution=zipfian



# # This works well, but 
# fieldlength=6000
# fieldcount=100
# recordcount=20000
# operationcount=200000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0.5
# updateproportion=0.4 
# scanproportion=0
# insertproportion=0.1
#
# requestdistribution=zipfian


# # this works without ycsb of osaka
# fieldlength=6000
# fieldcount=100
# recordcount=20000
# operationcount=2000000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0
# updateproportion=0.5
# scanproportion=0
# insertproportion=0.5
#
# requestdistribution=zipfian

# # test
# fieldlength=3000
# fieldcount=200
# recordcount=20000
# operationcount=200000000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0
# updateproportion=0.5
# scanproportion=0
# insertproportion=0.5
#
# requestdistribution=zipfian


# test
# fieldlength=3000
# fieldcount=300
# recordcount=1
# operationcount=2000000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0
# updateproportion=0.5
# scanproportion=0
# insertproportion=0.5
#
# requestdistribution=zipfian

## It works well
# fieldlength=300000
# fieldcount=1
# recordcount=1
# operationcount=20000000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0.4
# updateproportion=0.5
# scanproportion=0
# insertproportion=0.1
#
# requestdistribution=zipfian


## for latency
fieldlength=100000
fieldcount=1
recordcount=1
operationcount=20000000
workload=site.ycsb.workloads.CoreWorkload

readallfields=true

readproportion=0
updateproportion=0.5
scanproportion=0
insertproportion=0.5

requestdistribution=zipfian

## test for throughput
# fieldlength=100000
# fieldcount=1
# recordcount=1
# operationcount=200000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0
# updateproportion=0.5
# scanproportion=0
# insertproportion=0.5
#
# requestdistribution=zipfian

# fieldlength=100000
# fieldcount=1
# recordcount=1
# operationcount=100000
# workload=site.ycsb.workloads.CoreWorkload
#
# readallfields=true
#
# readproportion=0.5
# updateproportion=0.5
# scanproportion=0
# insertproportion=0
#
# requestdistribution=zipfian
 

# recordcount=1000000        # 少なくとも10万件のキーを用意
# operationcount=20000000    # 今のままでOK
# fieldlength=1000           # 10万は大きすぎて、L3キャッシュやmemcached設計の上限を圧迫する可能性あり
# fieldcount=10              # 少し複雑に
# requestdistribution=zipfian
#
# readproportion=0.2
# updateproportion=0.4
# insertproportion=0.4       # 書き込み中心構成は維持
